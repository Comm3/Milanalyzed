inner_join(
popolazione_subset
, by = "Quartiere")
popolazione_subset <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(tot = sum(X2014)) %>%
filter(Cittadinanza != "Italia") %>%
group_by(Quartiere) %>%
filter(tot == max(tot)) %>%
inner_join(popolazione_qt, by = "Quartiere") %>%
mutate(prc = round(tot / tot_qt * 100), as.character(Quartiere))
popolazione_subset <-
quartieri_dict %>%
mutate(Quartiere = as.character(q_synt)) %>%
select(id, Quartiere) %>%
inner_join(
popolazione_subset
, by = "Quartiere")
quartieri_dict %>%
mutate(Quartiere = as.character(q_synt)) %>%
select(id, Quartiere)
quartieri_dict %>%
mutate(Quartiere = as.character(q_synt)) %>%
select(id, Quartiere) %>%
inner_join(
popolazione_subset
, by = "Quartiere")
popolazione_subset <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(tot = sum(X2014)) %>%
filter(Cittadinanza != "Italia") %>%
group_by(Quartiere) %>%
filter(tot == max(tot)) %>%
inner_join(popolazione_qt, by = "Quartiere") %>%
mutate(prc = round(tot / tot_qt * 100), as.character(Quartiere))
quartieri_dict %>%
mutate(Quartiere = as.character(q_synt)) %>%
select(id, Quartiere) %>%
inner_join(
popolazione_subset
, by = "Quartiere")
popolazione_subset <-
quartieri_dict %>%
mutate(Quartiere = as.character(q_synt)) %>%
select(id, Quartiere) %>%
inner_join(
popolazione_subset
, by = "Quartiere") %>%
mutate(id = as.character(id))
View(popolazione_subset)
popolazione_subset <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(tot = sum(X2014)) %>%
filter(Cittadinanza != "Italia") %>%
group_by(Quartiere) %>%
filter(tot == max(tot)) %>%
inner_join(popolazione_qt, by = "Quartiere") %>%
mutate(prc = round(tot / tot_qt * 100), as.character(Quartiere))
popolazione_subset <-
quartieri_dict %>%
mutate(Quartiere = as.character(q_synt)) %>%
select(id, Quartiere) %>%
inner_join(
popolazione_subset
, by = "Quartiere")
popolazione_subset <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(tot = sum(X2014)) %>%
filter(Cittadinanza != "Italia") %>%
group_by(Quartiere) %>%
filter(tot == max(tot)) %>%
inner_join(popolazione_qt, by = "Quartiere") %>%
mutate(prc = round(tot / tot_qt * 100), as.character(Quartiere))
View(popolazione_subset)
popolazione_subset <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(tot = sum(X2014)) %>%
filter(Cittadinanza != "Italia") %>%
group_by(Quartiere) %>%
filter(tot == max(tot)) %>%
inner_join(popolazione_qt, by = "Quartiere") %>%
mutate(prc = round(tot / tot_qt * 100), Quartiere = as.character(Quartiere))
popolazione_subset <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
mutate(Quartiere = as.character(Quartiere)) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(tot = sum(X2014)) %>%
filter(Cittadinanza != "Italia") %>%
group_by(Quartiere) %>%
filter(tot == max(tot)) %>%
inner_join(popolazione_qt, by = "Quartiere") %>%
mutate(prc = round(tot / tot_qt * 100))
popolazione <- read.csv(file = "Dati/dataset/pop_sto_quartiere_1999-2014.csv",
header = TRUE,
sep = ";",
fileEncoding = "latin1") %>%
mutate(X2014 = as.numeric(X2014), Quartiere = as.character(Quartiere))
popolazione_qt <- select(popolazione, Quartiere, X2014) %>%
group_by(Quartiere) %>%
summarise(tot_qt = sum(X2014))
popolazione_subset <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(tot = sum(X2014)) %>%
filter(Cittadinanza != "Italia") %>%
group_by(Quartiere) %>%
filter(tot == max(tot)) %>%
inner_join(popolazione_qt, by = "Quartiere") %>%
mutate(prc = round(tot / tot_qt * 100))
popolazione_subset <-
quartieri_dict %>%
mutate(Quartiere = as.character(q_synt)) %>%
select(id, Quartiere) %>%
inner_join(
popolazione_subset
, by = "Quartiere") %>%
mutate(id = as.character(id))
View(popolazione_subset)
milan_qt.wgs84.f <- left_join(milan_qt.wgs84.f, popolazione_subset, by = "id")
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = Cittadinanza,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(x = "Longitudine", y = "Latitudine", fill = "Nascite per decesso",
alpha = "Nascite 2014") +
ggtitle("Tasso di natalità 2003/2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = Cittadinanza,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Tasso di natalità 2003/2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = Cittadinanza,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Seconda Nazionalità del quartiere 2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
View(milan_qt.f)
select(popolazione, Quartiere, Cittadinanze, X2014) %>%
spread(Quartiere, Cittadinanza)
select(popolazione, Quartiere, Cittadinanza, X2014) %>%
spread(Quartiere, Cittadinanza)
install.packages("tidur")
install.packages("tidyr")
library(tidyr)
select(popolazione, Quartiere, Cittadinanza, X2014) %>%
spread(Quartiere, Cittadinanza)
select(popolazione, Quartiere, Cittadinanza, X2014) %>%
spread(Quartiere, Cittadinanza, X2014)
select(popolazione, Quartiere, Cittadinanza, X2014) %>%
spread(Cittadinanza, X2014)
select(popolazione, Quartiere, Cittadinanza, X2014) %>%
spread(Cittadinanza)
select(popolazione, Quartiere, Cittadinanza, X2014) %>%
spread(Cittadinanza, X2014)
View(popolazione)
select(popolazione, Quartiere, Cittadinanza, X2014)
select(popolazione, Quartiere, Cittadinanza, X2014) %>%
spread(Cittadinanza, X2014)
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014))
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014))
View(popolazione_qt)
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014)) %>%
spread(Cittadinanza, X2014)
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014)) %>%
spread(Cittadinanza, pop)
View(popolazione_qt)
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014)) %>%
spread(Cittadinanza, pop) %>%
mutate(sum = rowSums(.[2:ncol(.)]))
View(popolazione_qt)
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014)) %>%
spread(Cittadinanza, pop) %>%
mutate(sum = rowSums(.[2:ncol(.)], na.rm = TRUE))
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014)) %>%
spread(Cittadinanza, pop) %>%
ungroup() %>%
mutate(sum = rowSums(.[2:ncol(.)], na.rm = TRUE))
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014)) %>%
spread(Cittadinanza, pop) %>%
replace(is.na(.), 0) %>%
mutate(sum = rowSums(.[2:ncol(.)]))
popolazione_qt <- select(popolazione, Quartiere, Cittadinanza, X2014) %>%
group_by(Quartiere, Cittadinanza) %>%
summarise(pop = sum(X2014)) %>%
spread(Cittadinanza, pop) %>%
replace(is.na(.), 0) %>%
mutate(sum = rowSums(.[2:4]))
popolazione_qt <-   mutate(sum = rowSums(.[2:4]))
popolazione_qt <-   popolazione_qt %>% mutate(sum = rowSums(.[2:4]))
popolazione_qt <-   popolazione_qt %>% mutate(sum = rowSums(.))
popolazione_qt <-   popolazione_qt %>% ungroup() %>% mutate(sum = rowSums(.[2:4]))
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = Cittadinanza,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Seconda Nazionalità del quartiere 2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
library(ggmap)
# library(maptools)
library(dplyr)
library(tidyr)
library(stringdist)
library(rgdal)
library(ggplot2)
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = Cittadinanza,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Seconda Nazionalità del quartiere 2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
# library(maptools)
library(dplyr)
library(tidyr)
library(stringdist)
library(rgdal)
library(ggplot2)
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = Cittadinanza,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Seconda Nazionalità del quartiere 2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = Cittadinanza,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
theme_minimal() +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Seconda Nazionalità del quartiere 2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
install.packages("png")
install.packages("gridExtra")
library(png)
library(gridExtra)
f_sri_lanka <- readPNG("/flags/sri_lanka.gif")
f_sri_lanka <- readPNG("Dati/flags/sri_lanka.gif")
f_sri_lanka <- readPNG("Dati/flags/sri_lanka.png")
g1<- rasterGrob(f_sri_lanka, interpolate=TRUE)
ggplot_rasterdf <- function(color_matrix, bottom = 0, top = 1, left = 0, right = 1) {
require("dplyr")
require("tidyr")
if (dim(color_matrix)[3] > 3) hasalpha <- T else hasalpha <- F
outMatrix <- matrix("#00000000", nrow = dim(color_matrix)[1], ncol = dim(color_matrix)[2])
for (i in 1:dim(color_matrix)[1])
for (j in 1:dim(color_matrix)[2])
outMatrix[i, j] <- rgb(color_matrix[i,j,1], color_matrix[i,j,2], color_matrix[i,j,3], ifelse(hasalpha, color_matrix[i,j,4], 1))
colnames(outMatrix) <- seq(1, ncol(outMatrix))
rownames(outMatrix) <- seq(1, nrow(outMatrix))
as.data.frame(outMatrix) %>% mutate(Y = nrow(outMatrix):1) %>% gather(X, color, -Y) %>%
mutate(X = left + as.integer(as.character(X))*(right-left)/ncol(outMatrix), Y = bottom + Y*(top-bottom)/nrow(outMatrix))
}
f_sri_lanka_dat <-
ggplot_rasterdf(f_sri_lanka,
left = min(df_ell[df_ell$group == "A",]$x),
right = max(df_ell[df_ell$group == "A",]$x),
bottom = min(df_ell[df_ell$group == "A",]$y),
top = max(df_ell[df_ell$group == "A",]$y) )
f_sri_lanka_dat <-
ggplot_rasterdf(f_sri_lanka)
f_sri_lanka_dat <-
ggplot_rasterdf(f_sri_lanka)
View(f_sri_lanka_dat)
View(popolazione_subset)
write.csv(popolazione_subset, file = "nazionalita_quartiere")
write.csv(popolazione_subset, file = "nazionalita_quartiere", sep = ";")
?write.csv
write.csv(popolazione_subset, sep = ";", file = "nazionalita_quartiere")
milan_qt.wgs84.f <- left_join(milan_qt.wgs84.f, popolazione_subset, by = "id")
write.csv(popolazione_subset, sep = ";", file = "nazionalita_quartiere")
write.csv(popolazione_subset, sep = ";", file = "nazionalita_quartiere.csv")
write.csv(popolazione_subset, sep = ";",row.names=FALSE, file = "nazionalita_quartiere.csv")
write.csv2(popolazione_subset, sep = ";",row.names=FALSE, file = "nazionalita_quartiere.csv")
naz_dict <- read.csv(file = "nazionalita_quartiere.csv")
naz_dict <- read.csv(file = "Dati/dataset/nazionalita_quartiere.csv")
naz_dict <- read.csv(file = "Dati/dataset/nazionalita_quartiere.csv", header = TRUE)
naz_dict <- read.csv(file = "Dati/dataset/nazionalita_quartiere.csv", header = TRUE)
naz_dict <- read.csv(file = "Dati/dataset/nazionalita_quartiere.csv", header = TRUE)
naz_dict <- read.csv(file = "Dati/dataset/nazionalita_quartiere.csv", header = TRUE)
View(naz_dict)
naz_dict <- read.csv(file = "Dati/dataset/nazionalita_quartiere.csv", header = TRUE, sep = ";")
sapply(popolazione_subset$Quartiere,
# Custom function
str_match,
words = levels(naz_dict$Nazionalita)
)
sapply(popolazione_subset$Cittadinanza,
# Custom function
str_match,
words = levels(naz_dict$Nazionalita)
)
naz_dict$Cittadinanza <-  sapply(popolazione_subset$Cittadinanza,
# Custom function
str_match,
words = levels(naz_dict$Nazionalita)
)
naz_dict$Cittadinanza <-  sapply(naz_dict$Nazionalita,
# Custom function
str_match,
words = levels(popolazione_subset$Cittadinanza)
)
sapply(naz_dict$Nazionalita,
# Custom function
str_match,
words = levels(popolazione_subset$Cittadinanza)
)
View(naz_dict)
str_match <- function(word1, words){
dst <- 100
word <- ""
for (wd in words) {
wd <- as.character(wd)
distance <- stringdist(tolower(encodeString(word1)), tolower(encodeString(wd)), method = "jw")
if (distance < dst) {
dst <- distance
word <- wd
}
}
return(word)
}
sapply(naz_dict$Nazionalita,
# Custom function
str_match,
words = levels(popolazione_subset$Cittadinanza)
)
sapply(as.character(naz_dict$Nazionalita),
# Custom function
str_match,
words = levels(as.character(popolazione_subset$Cittadinanza))
)
as.character(naz_dict$Nazionalita)
as.character(popolazione_subset$Cittadinanza)
sapply(as.character(naz_dict$Nazionalita),
# Custom function
str_match,
words = levels(as.character(popolazione_subset$Cittadinanza))
)
sapply(as.character(naz_dict$Nazionalita),
# Custom function
str_match,
words = as.character(popolazione_subset$Cittadinanza)
)
naz_dict$Cittadinanza <-  sapply(as.character(naz_dict$Nazionalita),
# Custom function
str_match,
words = as.character(popolazione_subset$Cittadinanza)
)
View(naz_dict)
naz_dict$Area_geografica <-  sapply(as.character(naz_dict$Nazionalita),
# Custom function
str_match,
words = as.character(popolazione_subset$Cittadinanza)
) %>%
inner_join(naz_dict)
sapply(levels(naz_dict$Nazionalita),
# Custom function
str_match,
words = levels(popolazione_subset$Cittadinanza)
)
naz_dict$Area_geografica <-  sapply(levels(naz_dict$Nazionalita),
# Custom function
str_match,
words = levels(popolazione_subset$Cittadinanza)
) %>%
inner_join(naz_dict)
naz_dict$Area_geografica <-  sapply(levels(naz_dict$Nazionalita),
# Custom function
str_match,
words = levels(popolazione_subset$Cittadinanza)
) %>%
inner_join(popolazione_subset)
naz_dict$Area_geografica <-  sapply(levels(naz_dict$Nazionalita),
# Custom function
str_match,
words = levels(popolazione_subset$Cittadinanza)
)
inner_join(popolazione_subset, naz_dict)
inner_join(popolazione_subset, naz_dict, by = "Cittadinanza")
popolazione_subset <- inner_join(popolazione_subset, naz_dict, by = "Cittadinanza")
View(popolazione_subset)
milan_qt.wgs84.f <- left_join(milan_qt.wgs84.f, popolazione_subset, by = "id")
milan_zone.wgs84.f <- fortify(milan_zone.wgs84, region = "ZONADEC") %>%
merge(milan_zone@data, by.x = "id", by.y = "ZONADEC")
milan_qt.wgs84.f <- fortify(milan_qt.wgs84, region = "ID_NIL") %>%
merge(milan_qt.wgs84@data, by.x = "id", by.y = "ID_NIL") %>%
left_join(db_synt, by = "id")
milan_qt.wgs84.f <- left_join(milan_qt.wgs84.f, popolazione_subset, by = "id")
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = zona_geografica,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Seconda Nazionalità del quartiere 2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
library(ggmap)
lnd.osm +
geom_polygon(data = milan_qt.wgs84.f,
aes(x = long, y = lat, group = group,
fill = zona_geografica,
alpha = prc
),
# alpha = 0.5,
colour = "black", size = 0.25) +
geom_polygon(data = milan_zone.wgs84.f,
aes(long, lat, group = group),
fill = NA, color = "black", size = 1
) +
labs(fill = "Nazionalità",
alpha = "Nascite 2014") +
ggtitle("Seconda Nazionalità del quartiere 2014") +
# scale_fill_distiller(palette = "Greens", breaks = pretty_breaks(n = 5)) +
guides(fill = guide_legend(reverse = TRUE))
